import scala.collection.mutable.ArrayBuffer 
import scala.collection.mutable.ListBuffer
class Ahocorasick {
    class Node{
        var next:Map[String,Node] = Map()
        var fail:Node
        var isWord = false
    }
    var root = new Node()
    /**
     * 建立trie树
     */
    def addWord(word :String):Unit={
        var tmpNode = this.root
        for(singleString <- word){
            var singleKey = singleString.toString()
            if( false==tmpNode.next.contains( singleKey ) ){
                var newNode = new Node()
                tmpNode.next += ( singleKey->newNode )         
            }
            tmpNode = tmpNode.next( singleKey )
         tmpNode.isWord=true
        }
    }
    /**
     * 根据kmp算法 建立自动机结构
     */
    def make():Unit={
      var nodeArray:ArrayBuffer[Node] = ArrayBuffer(this.root)
      while(nodeArray.length>0){
          var lenthNodeArray = nodeArray.length
          var tmpNode=nodeArray(lenthNodeArray-1) //设置当前节点
          nodeArray.remove(lenthNodeArray) //删除最后一个节点
          for(singleKey <- tmpNode.next.keys){
                if ( tmpNode==this.root){
                    tmpNode.fail = this.root
                }else{
                    var point = tmpNode.fail
                    var whileLoopFlag = true
                    while ( point != null && whileLoopFlag ){
                        if ( tmpNode.next.contains(singleKey) ){
                            tmpNode.next(singleKey).fail = point.fail
                            whileLoopFlag=false
                        }
                        point=point.fail
                    }
                    if ( point == null ){
                      tmpNode.next(singleKey).fail=this.root
                    }  
                }
                nodeArray+=tmpNode.next(singleKey)
          }
          
        
        
      }
    }
    /**
     * 查找关键词
     */
    def search(word:String):ListBuffer[Tuple2[Int,Int]]={
         var point = this.root
         var result:ListBuffer[Tuple2[Int,Int]]=ListBuffer()
         var startWordIndex = 0
         var endWordIndex = 0
         var currentPosition = 0
         while (currentPosition < word.length){
             var singleString = word(currentPosition)
             var singleKey = singleString.toString()
             //没有匹配到时候 
             if ( point.next.contains( singleKey ) ==false && point != this.root ){
                 point = point.fail
             }
             if ( point.next.contains( singleKey )){
                 if( point==this.root )
                     startWordIndex = currentPosition //匹配开始记录开始位置
                     point=point.next( singleKey ) //转移 状态机的状态
             }else{
                 point = this.root
             }
             if( point.isWord ){
                 var wordStartEnd=(startWordIndex,currentPosition)
                 result += wordStartEnd
             }
             currentPosition += 1
         }
         return result
         
    }
}        
object Ahocorasick{
  def main():Unit={
      var aho = new Ahocorasick()
      aho.addWord("abc")
      aho.addWord("de")
      aho.make()
      aho.search("abcdefabc")
  }
}
